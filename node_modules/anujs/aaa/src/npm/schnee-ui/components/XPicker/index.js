import React from "../../../../ReactQuick.js";
import {
    nextDate,
    timeStrToDate,
    getDate,
    nextMinute,
    getTime
} from '../../common/utils/time';
import cnCity from '../../common/utils/cnCity';

function handleSelect(selected) {
    if (selected) {
        return Array.isArray(selected) ? selected : [selected];
    } else {
        return [];
    }
}

function XPicker(props) {
    this.selectedValue = props.value;
    this.prevSelectedValue = this.selectedValue;
    const {
        range,
        dataMap,
        value,
        mode,
        start,
        end
    } = props;
    let rangeValue = mode === 'region' ? cnCity : range;
    const {
        groups,
        newselected
    } = this.parseData(rangeValue, dataMap.items, value);
    this.state = {
        animationClass: '',
        groups,
        selected: newselected,
        start: timeStrToDate(start, mode),
        end: timeStrToDate(end, mode)
    };
    this.prevSelected = newselected;
    this.prevGroups = groups;
    this.handleTouchMove = this.handleTouchMove.bind(this);
}

XPicker = React.toClass(XPicker, React.Component, {
    parseData: function(data, subKey, selected, group = [], newselected = []) {
        if (this.props.mode === 'date') {
            selected = selected ? new Date(selected) : new Date();
            let newselected = nextDate(selected);
            return {
                groups: [{
                    format: 'YYYY',
                    caption: '年',
                    step: 1,
                    type: 'Year'
                }, {
                    format: 'MM',
                    caption: '月',
                    step: 1,
                    type: 'Month'
                }, {
                    format: 'DD',
                    caption: '日',
                    step: 1,
                    type: 'Date'
                }],
                newselected
            };
        }

        if (this.props.mode === 'time') {
            selected = selected ? timeStrToDate(selected, 'time') : new Date();
            let newselected = nextMinute(selected);
            return {
                groups: [{
                    format: 'hh',
                    caption: '时',
                    step: 1,
                    type: 'Hour'
                }, {
                    format: 'mm',
                    caption: '分',
                    step: 1,
                    type: 'Minute'
                }],
                newselected
            };
        }

        selected = handleSelect(selected);
        let _selected = 0;

        if (Array.isArray(selected) && selected.length > 0) {
            let _selectedClone = selected.slice(0);

            _selected = _selectedClone.shift();
            selected = _selectedClone;
        }

        data.forEach((item, index) => {
            if (item[this.props.dataMap.id] === _selected) {
                _selected = index;
            }
        });

        if (typeof data[_selected] === 'undefined') {
            _selected = 0;
        }

        newselected.push(_selected);
        let item = data[_selected];

        var _group = JSON.parse(JSON.stringify(data));

        _group.forEach(g => delete g[subKey]);

        group.push({
            items: _group,
            mapKeys: {
                label: this.props.dataMap.id
            }
        });

        if (typeof item[subKey] !== 'undefined' && Array.isArray(item[subKey])) {
            return this.parseData(item[subKey], subKey, selected, group, newselected);
        } else {
            return {
                groups: group,
                newselected
            };
        }
    },
    updateVisible: function(visible) {
        this.timeoutId && clearTimeout(this.timeoutId);

        if (visible) {
            this.setState({
                show: true,
                animationClass: 'pickerenter'
            });
        } else {
            this.setState({
                animationClass: 'pickerleave'
            });
            this.timeoutId = setTimeout(() => {
                this.setState({
                    show: false
                });
            }, 200);
        }
    },
    componentWillReceiveProps: function(nextProps) {
        if (this.props.mode !== nextProps.mode || this.props.value !== nextProps.value) {
            const {
                range,
                dataMap,
                value,
                mode,
                start,
                end
            } = nextProps;
            let rangeValue = mode === 'region' ? cnCity : range;
            const {
                groups,
                newselected
            } = this.parseData(rangeValue, dataMap.items, value);
            this.setState({
                groups,
                selected: newselected,
                start: timeStrToDate(start, mode),
                end: timeStrToDate(end, mode)
            });
        }
    },
    cancelClick: function() {
        this.setState({
            selected: this.prevSelected,
            groups: this.prevGroups
        });
        this.selectedValue = this.prevSelectedValue;
        this.updateVisible(false);
    },
    confirmClick: function() {
        this.updateVisible(false);
        this.prevSelected = this.state.selected;
        this.prevGroups = this.state.groups;
        this.prevSelectedValue = this.selectedValue;
        this.props.onChange && this.props.onChange({
            value: this.selectedValue
        });
    },
    click: function(e) {
        this.updateVisible(true);
    },
    updateDataBySelected: function(selected, cb) {
        const {
            range,
            dataMap,
            mode
        } = this.props;
        let rangeValue = mode === 'region' ? cnCity : range;
        const {
            groups,
            newselected
        } = this.parseData(rangeValue, dataMap.items, selected);
        let text = [];

        switch (mode) {
            case 'region':
            case 'multiSelector':
                groups.forEach((group, _i) => {
                    text.push(group.items[newselected[_i]][this.props.dataMap.id]);
                });
                break;

            case 'selector':
                text = newselected[0];
                break;
        }

        this.setState({
            groups,
            selected: newselected
        });
        cb(text);
    },
    handleItemChange: function(selected, groupIndex) {
        const selectedArr = this.state.selected.map((select, index) => {
            if (index < groupIndex) {
                return select;
            } else if (index === groupIndex) {
                return selected;
            } else {
                return 0;
            }
        });
        this.updateDataBySelected(selectedArr, value => {
            this.selectedValue = value;
        });
    },
    handleDateChange: function(data) {
        let {
            date,
            disabled
        } = data;

        if (!disabled) {
            this.selectedValue = this.props.mode === 'date' ? getDate(date) : getTime(date);
        } else {
            if (date > this.state.end) {
                this.selectedValue = this.props.end;
                date = this.state.end;
            } else {
                this.selectedValue = this.props.start;
                date = this.state.start;
            }
        }

        this.setState({
            selected: date
        });
    },
    handleTouchMove: function() {
        return false;
    },
    render: function() {
        var h = React.createElement;
        return h("div", {
            catchTouchMove: this.handleTouchMove,
            "data-touchmove-uid": "e225_11",
            "data-beacon-uid": "default"
        }, h("div", {
            catchClick: this.click.bind(this),
            "data-click-uid": "e226_13",
            "data-beacon-uid": "default"
        }, this.props.children), h(React.useComponent, {
            visible: this.state.show,
            onClose: this.cancelClick.bind(this),
            is: "XOverlay",
            "data-instance-uid": 'i227_8_' + 0
        }), h("div", {
            id: "quist-picker",
            class: 'quist-picker  ' + this.state.animationClass,
            show: !!this.state.show
        }, h("div", {
            class: "quist-picker-title"
        }, h("text", {
            class: "quist-picker-cancel",
            catchClick: this.cancelClick.bind(this),
            "data-click-uid": "e230_44",
            "data-beacon-uid": "default"
        }, this.props.cancelText), h("text", {
            class: "quist-picker-confirm",
            catchClick: this.confirmClick.bind(this),
            style: React.toStyle({
                color: this.props.okStyle
            }, this.props, 'style13397'),
            "data-click-uid": "e236_12",
            "data-beacon-uid": "default"
        }, this.props.okText)), h("div", {
            class: "quist-picker-content"
        }, this.state.groups.map(function(group, index) {
            return h("div", {
                class: "anu-picker-item",
                key: this.props.mode + index
            }, this.props.mode === 'date' || this.props.mode === 'time' ? h(React.useComponent, {
                value: this.state.selected,
                onChange: this.handleDateChange.bind(this),
                step: group.step,
                type: group.type,
                format: group.format,
                start: this.state.start,
                end: this.state.end,
                visible: this.state.show,
                is: "XDatePickerItem",
                "data-instance-uid": 'i246_18_' + index
            }) : h(React.useComponent, {
                items: group.items,
                mapKeys: group.mapKeys,
                groupIndex: index,
                onChange: this.handleItemChange.bind(this),
                defaultIndex: this.state.selected[index],
                is: "XPickerItem",
                "data-instance-uid": 'i257_18_' + index
            }));
        }, this))));;
    },
    classUid: "c8498"
}, {});
XPicker.defaultProps = {
    cancelText: '取消',
    okText: '确定',
    mode: 'selector',
    dataMap: {
        id: 'name',
        items: 'sub'
    },
    okStyle: '#1AAD19'
};
export {
    React
};
export default XPicker;
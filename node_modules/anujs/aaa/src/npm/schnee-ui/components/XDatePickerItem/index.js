import React from "../../../../ReactQuick.js";
import * as TimeUtil from '../../common/utils/time.js';
const DATE_LENGTH = 14;
const MIDDLE_INDEX = Math.floor(DATE_LENGTH / 2);
const DEFAULT_INDEX = 3;
var gid = 0;

function XDatePickerItem(props) {
    const dates = this._iniDates(props.value);

    this.currentIndex = MIDDLE_INDEX;
    this.moveDateCount = 0;
    this.translateY = 0;
    this.touchY = 0;
    this.state = {
        touching: false,
        touchId: undefined,
        ogY: 0,
        ogTranslate: 0,
        translateY: -MIDDLE_INDEX * props.itemHeight + props.indicatorTop,
        totalHeight: 0,
        selected: 0,
        marginTop: 0,
        totalHeight: DATE_LENGTH * props.indicatorHeight,
        dates
    };
}

XDatePickerItem = React.toClass(XDatePickerItem, React.Component, {
    _iniDates: function(value) {
        const type = this.props.type;
        const dates = Array(...Array(DATE_LENGTH)).map((item, index) => {
            let date = TimeUtil["next" + type](value, (index - MIDDLE_INDEX) * this.props.step);
            let disabled = date < this.props.start || date > this.props.end;
            return {
                key: TimeUtil.convertDate(date, this.props.format),
                date,
                disabled
            };
        });
        return dates;
    },
    componentWillReceiveProps: function(nextProps) {
        if (nextProps.visible) {
            const dates = this._iniDates(nextProps.value);

            this.setState({
                dates
            });
        }
    },
    handleTouchStart: function(e) {
        if (this.state.touching) return;
        this.moveDateCount = 0;
        this.touchY = e.touches[0].pageY;
        this.translateY = this.state.translateY;
        this.setState({
            touching: true,
            ogTranslate: this.state.translateY,
            touchId: e.touches[0].identifier,
            ogY: e.touches[0].pageY - this.state.translate,
            animating: false
        });
    },
    handleTouchMove: function(e) {
        if (!this.state.touching) return;
        if (e.touches[0].identifier !== this.state.touchId) return;
        const touchY = e.touches[0].pageY;
        const dir = touchY - this.touchY;
        const translateY = this.translateY + dir;
        this.setState({
            translateY
        });
        const direction = dir > 0 ? -1 : 1;

        if (this._checkIsUpdateDates(direction, translateY)) {
            this._updateDates(direction);
        }
    },
    _updateDates: function(direction) {
        let typeName = this.props.type;
        let {
            dates
        } = this.state;
        let itemHeight = this.props.itemHeight;

        if (direction === 1) {
            let value = TimeUtil["next" + typeName](dates[dates.length - 1].date, this.props.step);
            this.currentIndex++;
            let key = TimeUtil.convertDate(value, this.props.format);
            let disabled = value < this.props.start || value > this.props.end;
            this.setState({
                dates: [...dates.slice(1), {
                    key,
                    date: value,
                    disabled
                }],
                marginTop: (this.currentIndex - MIDDLE_INDEX) * itemHeight
            });
        } else {
            this.currentIndex--;
            let value = TimeUtil["next" + typeName](dates[0].date, -this.props.step);
            let key = TimeUtil.convertDate(value, this.props.format);
            let disabled = value < this.props.start || value > this.props.end;
            this.setState({
                dates: [{
                    key,
                    date: value,
                    disabled
                }, ...dates.slice(0, dates.length - 1)],
                marginTop: (this.currentIndex - MIDDLE_INDEX) * itemHeight
            });
        }
    },
    _checkIsUpdateDates: function(direction, translateY) {
        let itemHeight = this.props.itemHeight;
        let isUpdate = direction === 1 ? (this.currentIndex - DEFAULT_INDEX) * itemHeight + itemHeight / 2 < -translateY : (this.currentIndex - DEFAULT_INDEX) * itemHeight - itemHeight / 2 > -translateY;
        return isUpdate;
    },
    handleTouchEnd: function() {
        if (!this.state.touching) return;
        let itemHeight = this.props.itemHeight;
        let translate = this.state.translateY;

        if (Math.abs(translate - this.state.ogTranslate) < itemHeight * 0.51) {
            translate = this.state.ogTranslate;
        } else {
            translate = -(this.currentIndex - DEFAULT_INDEX) * itemHeight;
        }

        this.setState({
            touching: false,
            ogY: 0,
            touchId: undefined,
            ogTranslate: 0,
            animating: true,
            translateY: translate
        }, () => this.updateSelected());
    },
    updateSelected: function() {
        let selected = this.state.dates[MIDDLE_INDEX];
        const {
            value,
            type
        } = this.props;
        ['Year', 'Month', 'Date', 'Hour', 'Minute', 'Second'].forEach(key => {
            if (key !== type) {
                let prop = key === 'Year' ? 'FullYear' : key;
                prop = prop === 'Hour' || prop === 'Minute' || prop === 'Second' ? prop + "s" : prop;
                selected.date["set" + prop](value["get" + prop]());
            }
        });
        selected.disabled = selected.date < this.props.start || selected.date > this.props.end;
        this.props.onChange && this.props.onChange(selected);
    },
    render: function() {
        var h = React.createElement;
        return h("stack", {
            catchTouchStart: this.handleTouchStart.bind(this),
            catchTouchMove: this.handleTouchMove.bind(this),
            onTouchEnd: this.handleTouchEnd.bind(this),
            class: "anu-stack",
            "data-touchstart-uid": "e176_8",
            "data-beacon-uid": "default",
            "data-touchmove-uid": "e177_8",
            "data-touchend-uid": "e178_8",
            style: React.toStyle({
                width: '100%'
            }, this.props, 'style10691')
        }, h("div", {
            class: "anu-picker_content",
            style: React.toStyle({
                marginTop: this.state.marginTop + 'PX',
                height: this.state.totalHeight + 'PX',
                transform: 'translateY(' + this.state.translateY + 'PX)'
            }, this.props, 'style11099')
        }, this.state.dates.map(function(item, index) {
            return h("text", {
                key: item.key + '-' + index,
                class: 'anu-picker__item ' + (item.disabled ? 'anu-picker__item_disabled' : '')
            }, item.key);
        }, this)), h("div", {
            class: "anu-picker__mask"
        }, h("div", {
            class: "anu-picker__mask_top"
        }), h("div", {
            class: "anu-picker__mask_center"
        }), h("div", {
            class: "anu-picker__mask_bottom "
        })));;
    },
    classUid: "c6516"
}, {});
XDatePickerItem.defaultProps = {
    itemHeight: 25 + 9,
    indicatorTop: 102,
    indicatorHeight: 34,
    animation: true,
    groupIndex: -1,
    defaultIndex: -1,
    mapKeys: {
        label: 'label'
    }
};
export {
    React
};
export default XDatePickerItem;
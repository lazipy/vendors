import React from "../../../../ReactQuick.js";

function collectCheckboxInstances(fiber, ret, instance) {
    for (fiber = fiber.child; fiber; fiber = fiber.sibling) {
        if (fiber.name === 'XCheckbox') {
            ret.push(fiber.stateNode);
        } else if (fiber.child) {
            collectCheckboxInstances(fiber, ret, instance);
        }
    }
}

const styleConfig = {
    width: 44,
    fontSize: 38,
    gap: 6
};

function getSizeStyle(size) {
    let {
        width,
        fontSize,
        gap
    } = styleConfig;

    switch (size) {
        case 'large':
            width += gap;
            fontSize += gap;
            break;

        case 'small':
            width -= gap;
            fontSize -= gap;
            break;
    }

    return {
        width: width + "rpx",
        fontSize: fontSize + "rpx"
    };
}

const BACKGROUND_COLOR = '#ffffff';
const DISABLED_COLOR = '#e1e1e1';
const DISABLED_ENHANCE_COLOR = '#b3b3b3';
const DEFAULT_CHECKED_COLOR = '#1aad16';

function XCheckbox(props) {
    const {
        width,
        fontSize
    } = getSizeStyle(props.size);
    this.state = {
        checked: props.checked,
        width,
        fontSize
    };
    this.onClick = this.onClick.bind(this);
    this.handleClick = this.handleClick.bind(this);
}

XCheckbox = React.toClass(XCheckbox, React.Component, {
    onClick: function(e) {
        this.handleClick(e);
    },
    handleClick: function() {
        if (this.props.disabled) {
            return;
        }

        let fiber = this._reactInternalFiber;
        console.log('fiber: ', fiber);
        const checkboxInstances = [];
        let parentInstance = null;

        while (fiber.return) {
            fiber = fiber.return;

            if (fiber.name === 'XCheckboxGroup') {
                parentInstance = fiber.stateNode;
                collectCheckboxInstances(fiber, checkboxInstances, this);
            }
        }

        this.setState({
            checked: !this.state.checked
        }, () => {
            const checkedCheckboxes = checkboxInstances.filter(checkboxInstance => checkboxInstance.state.checked).map(checkboxInstance => checkboxInstance.props.value);
            parentInstance && parentInstance.emitEvent(checkedCheckboxes);
        });
    },
    componentWillReceiveProps: function(nextProps) {
        const updateProps = {};
        let shouldUpdate = false;
        ['checked', 'size'].forEach(key => {
            if (nextProps[key] !== this.props[key]) {
                shouldUpdate = true;

                if (key === 'size') {
                    const {
                        width,
                        fontSize
                    } = getSizeStyle(nextProps.size);
                    updateProps.width = width;
                    updateProps.fontSize = fontSize;
                } else {
                    updateProps[key] = nextProps[key];
                }
            }
        });

        if (shouldUpdate) {
            this.setState(updateProps);
        }
    },
    render: function() {
        var h = React.createElement;
        return h("div", {
            className: "checkbox-container"
        }, !this.props.isRight && h("text", null, this.props.text), h("div", {
            className: "checkbox",
            onClick: this.onClick,
            "data-click-uid": "e122_20",
            "data-beacon-uid": "default",
            style: React.toStyle({
                backgroundColor: this.props.disabled ? DISABLED_COLOR : BACKGROUND_COLOR,
                marginLeft: this.props.isRight ? '0rpx' : '10rpx',
                marginRight: this.props.isRight ? '10rpx' : '0rpx',
                minWidth: this.state.width,
                minHeight: this.state.width,
                width: this.state.width,
                height: this.state.width
            }, this.props, 'style7517')
        }, this.state.checked && h("text", {
            className: "iconfont checkbox__check",
            style: React.toStyle({
                color: this.props.disabled ? DISABLED_ENHANCE_COLOR : this.props.color,
                fontSize: this.state.fontSize
            }, this.props, 'style8661')
        }, "ÔÅ∏")), this.props.isRight && h("text", null, this.props.text));;
    },
    classUid: "c5737"
}, {});
XCheckbox.defaultProps = {
    disabled: false,
    checked: false,
    value: '',
    text: '',
    isRight: true,
    color: DEFAULT_CHECKED_COLOR,
    size: 'default',
    __InLabel: false
};
export {
    React
};
export default XCheckbox;